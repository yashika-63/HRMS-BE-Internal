package com.spectrum.Confirmation.ConfirmationRecord.service;

import com.spectrum.Confirmation.ConfirmationRecord.model.ConfirmationLetter;
import com.spectrum.Confirmation.ConfirmationRecord.repository.ConfirmationLetterRepository;
import com.spectrum.model.CompanyRegistration;
import com.spectrum.model.Employee;
import com.spectrum.repository.CompanyRegistrationRepository;
import com.spectrum.repository.EmployeeRepository;

import jakarta.mail.internet.MimeMessage;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

@Service
public class ConfirmationLetterService {

    @Autowired
    private ConfirmationLetterRepository confirmationLetterRepository;

    @Autowired
    private EmployeeRepository employeeRepository;

    @Autowired
    private CompanyRegistrationRepository companyRegistrationRepository;

    @Autowired
    private JavaMailSender mailSender;


    public ConfirmationLetter saveConfirmationLetter(Long employeeId, Long createdById, Long companyId) {
    Optional<Employee> employeeOpt = employeeRepository.findById(employeeId);
    Optional<Employee> createdByOpt = employeeRepository.findById(createdById);
    Optional<CompanyRegistration> companyOpt = companyRegistrationRepository.findById(companyId);

    if (employeeOpt.isPresent() && createdByOpt.isPresent() && companyOpt.isPresent()) {
        Employee employee = employeeOpt.get();
        Employee createdBy = createdByOpt.get();
        CompanyRegistration company = companyOpt.get();

        Optional<ConfirmationLetter> existingConfirmation = confirmationLetterRepository.findByEmployee(employee);
        if (existingConfirmation.isPresent()) {
            throw new RuntimeException("Confirmation Letter already exists for this Employee.");
        }

        ConfirmationLetter confirmationLetter = new ConfirmationLetter();
        confirmationLetter.setEmployee(employee);
        confirmationLetter.setCreatedBy(createdBy);
        confirmationLetter.setCompany(company);

        confirmationLetter.setEmployeeAction(false);
        confirmationLetter.setEmployeeAccept(false);
        confirmationLetter.setEmployeeReject(false);

        String companyName = company.getCompanyName();
        String prefix = companyName.length() >= 4 ? companyName.substring(0, 4).toUpperCase() : companyName.toUpperCase();
        String randomPart = UUID.randomUUID().toString().substring(0, 8);
        String uniqueKey = prefix + "-" + randomPart;

        confirmationLetter.setUniqueKey(uniqueKey);
        confirmationLetterRepository.save(confirmationLetter);

        // Send email notification
        String toEmail = employee.getEmail();
        String subject = "Confirmation Letter Generated";
        String message = String.format(
            "Dear %s %s,\n\nYour confirmation letter has been generated by %s. " +
            "Please review and confirm it using your employee portal.\n\n" +
            "Confirmation ID: %s\n\nRegards,\nHR Department",
            employee.getFirstName(),
            employee.getLastName(),
            createdBy.getFirstName() + " " + createdBy.getLastName(),
            uniqueKey
        );

        try {
            MimeMessage mimeMessage = mailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(mimeMessage, "utf-8");
            helper.setTo(toEmail);
            helper.setSubject(subject);
            helper.setText(message, false);
            mailSender.send(mimeMessage);
        } catch (Exception e) {
            throw new RuntimeException("Failed to send confirmation email", e);
        }

        return confirmationLetter;
    } else {
        throw new RuntimeException("Employee, CreatedBy, or Company not found");
    }
}




    public ConfirmationLetter getByEmployeeId(Long employeeId) {
        Optional<Employee> employeeOpt = employeeRepository.findById(employeeId);
        if (employeeOpt.isPresent()) {
            Optional<ConfirmationLetter> confirmationLetterOpt = confirmationLetterRepository.findByEmployee(employeeOpt.get());
            if (confirmationLetterOpt.isPresent()) {
                return confirmationLetterOpt.get();
            } else {
                throw new RuntimeException("No Confirmation Letter found for the given Employee ID.");
            }
        } else {
            throw new RuntimeException("Employee not found with ID: " + employeeId);
        }
    }


    public List<ConfirmationLetter> getByCompanyId(Long companyId) {
        Optional<CompanyRegistration> companyOpt = companyRegistrationRepository.findById(companyId);
        if (companyOpt.isPresent()) {
            return confirmationLetterRepository.findByCompanyOrderByIdDesc(companyOpt.get());
        } else {
            throw new RuntimeException("Company not found with ID: " + companyId);
        }
    }


    public void deleteById(Long id) {
        if (confirmationLetterRepository.existsById(id)) {
            confirmationLetterRepository.deleteById(id);
        } else {
            throw new RuntimeException("Confirmation Letter not found with ID: " + id);
        }
    }
    



    public ConfirmationLetter acceptConfirmationLetter(Long confirmationId) {
        Optional<ConfirmationLetter> confirmationOpt = confirmationLetterRepository.findById(confirmationId);
    
        if (confirmationOpt.isPresent()) {
            ConfirmationLetter confirmationLetter = confirmationOpt.get();
    
            // Update flags
            confirmationLetter.setEmployeeAccept(true);
            confirmationLetter.setEmployeeAction(true);
            confirmationLetter.setEmployeeReject(false); // Optional: if you want to enforce reject=false
    
            confirmationLetterRepository.save(confirmationLetter);
    
            // Send email notification to the creator
            Employee createdBy = confirmationLetter.getCreatedBy();
            Employee employee = confirmationLetter.getEmployee();
    
            String toEmail = createdBy.getEmail();
            String subject = "Employee Accepted Confirmation Letter";
            String message = String.format(
                "Dear %s %s,\n\nEmployee %s %s has accepted the confirmation letter with ID: %s.\n\n" +
                "You can review this in the system.\n\nRegards,\nConfirmation System",
                createdBy.getFirstName(),
                createdBy.getLastName(),
                employee.getFirstName(),
                employee.getLastName(),
                confirmationLetter.getUniqueKey()
            );
    
            try {
                MimeMessage mimeMessage = mailSender.createMimeMessage();
                MimeMessageHelper helper = new MimeMessageHelper(mimeMessage, "utf-8");
                helper.setTo(toEmail);
                helper.setSubject(subject);
                helper.setText(message, false);
                mailSender.send(mimeMessage);
            } catch (Exception e) {
                throw new RuntimeException("Failed to send email to createdBy", e);
            }
    
            return confirmationLetter;
        } else {
            throw new RuntimeException("Confirmation Letter not found with ID: " + confirmationId);
        }
    }
    


    public ConfirmationLetter rejectConfirmationLetter(Long confirmationId) {
        Optional<ConfirmationLetter> confirmationOpt = confirmationLetterRepository.findById(confirmationId);
    
        if (confirmationOpt.isPresent()) {
            ConfirmationLetter confirmationLetter = confirmationOpt.get();
    
            // Update flags
            confirmationLetter.setEmployeeReject(true);
            confirmationLetter.setEmployeeAction(true);
            confirmationLetter.setEmployeeAccept(false); // Ensure accept is false on rejection
    
            confirmationLetterRepository.save(confirmationLetter);
    
            // Send email to the creator
            Employee createdBy = confirmationLetter.getCreatedBy();
            Employee employee = confirmationLetter.getEmployee();
    
            String toEmail = createdBy.getEmail();
            String subject = "Employee Rejected Confirmation Letter";
            String message = String.format(
                "Dear %s %s,\n\nEmployee %s %s has rejected the confirmation letter with ID: %s.\n\n" +
                "Please take necessary action.\n\nRegards,\nConfirmation System",
                createdBy.getFirstName(),
                createdBy.getLastName(),
                employee.getFirstName(),
                employee.getLastName(),
                confirmationLetter.getUniqueKey()
            );
    
            try {
                MimeMessage mimeMessage = mailSender.createMimeMessage();
                MimeMessageHelper helper = new MimeMessageHelper(mimeMessage, "utf-8");
                helper.setTo(toEmail);
                helper.setSubject(subject);
                helper.setText(message, false);
                mailSender.send(mimeMessage);
            } catch (Exception e) {
                throw new RuntimeException("Failed to send rejection email to createdBy", e);
            }
    
            return confirmationLetter;
        } else {
            throw new RuntimeException("Confirmation Letter not found with ID: " + confirmationId);
        }
    }
    



    @Scheduled(cron = "0 9 17 * * ?") // Runs every day at 9 AM
public void remindAndAutoApproveConfirmations() {
    List<ConfirmationLetter> pendingConfirmations = confirmationLetterRepository
        .findByEmployeeActionFalse();

    for (ConfirmationLetter letter : pendingConfirmations) {
        LocalDate creationDate = letter.getDate();
        long daysPassed = ChronoUnit.DAYS.between(creationDate, LocalDate.now());

        Employee employee = letter.getEmployee();
        Employee createdBy = letter.getCreatedBy();

        if (daysPassed >= 5 && daysPassed < 7) {
            // Send reminder email
            String subject = "Reminder: Confirm Your Confirmation Letter";
            String message = String.format(
                "Dear %s,\n\nThis is a reminder to take action on your confirmation letter (ID: %s).\n" +
                "You have %d days remaining before automatic approval.\n\n" +
                "Please log in and respond.\n\nRegards,\nHR Department",
                employee.getFirstName(),
                letter.getUniqueKey(),
                7 - daysPassed
            );
            sendEmail(employee.getEmail(), subject, message);

        } else if (daysPassed >= 7) {
            // Auto-approve
            letter.setEmployeeAction(true);
            letter.setEmployeeAccept(true);
            confirmationLetterRepository.save(letter);

            // Notify employee
            sendEmail(employee.getEmail(),
                "Confirmation Letter Auto-Approved",
                String.format("Dear %s,\n\nYour confirmation letter (ID: %s) has been automatically approved after 7 days of inactivity.\n\nRegards,\nHR Department", employee.getFirstName(), letter.getUniqueKey())
            );

            // Notify creator
            sendEmail(createdBy.getEmail(),
                "Confirmation Letter Auto-Approved for Employee",
                String.format("Dear %s,\n\nThe confirmation letter for employee %s (ID: %s) has been auto-approved after no action in 7 days.\n\nRegards,\nSystem Notification",
                    createdBy.getFirstName(), employee.getFirstName(), letter.getUniqueKey())
            );
        }
    }
}




private void sendEmail(String to, String subject, String body) {
    try {
        MimeMessage mimeMessage = mailSender.createMimeMessage();
        MimeMessageHelper helper = new MimeMessageHelper(mimeMessage, "utf-8");
        helper.setTo(to);
        helper.setSubject(subject);
        helper.setText(body, false);
        mailSender.send(mimeMessage);
    } catch (Exception e) {
        throw new RuntimeException("Failed to send email to: " + to, e);
    }
}

}
